var y=Object.defineProperty;var U=(u,i,c)=>i in u?y(u,i,{enumerable:!0,configurable:!0,writable:!0,value:c}):u[i]=c;var h=(u,i,c)=>(U(u,typeof i!="symbol"?i+"":i,c),c);(function(){"use strict";function u(e){if(e===0)return 1;{const n=Math.PI*e;return Math.sin(n)/n}}function i(e,n,s){return u(n*e)*u(2*e/s)}function c(e){function n(t,r,a){return(t*24+r)*2+a}const s=new Float32Array(33*24*2);for(let t=0;t<33;t++){const r=t/32;let a=0;for(let o=0;o<24;o++){const l=i(r-o+11,e,24);s[n(t,o,0)]=l,a+=l}for(let o=0;o<24;o++)s[n(t,o,0)]/=a}for(let t=0;t<32;t++)for(let r=0;r<24;r++){const a=s[n(t,r,0)],o=s[n(t+1,r,0)];s[n(t,r,1)]=o-a}return s}const m=c(1);function b(e,n){return n<0?e.length?e[0]:0:n>=e.length?e.length?e[e.length-1]:0:e[n]}function R(e,n,s){const t=Math.floor(s),r=(s-t)*32,a=Math.floor(r),o=r-a,l=a*24;let M=0;for(let p=0;p<24;p++){const P=t+p-11,d=(l+p)*2;M+=b(n,P)*(e[d]+e[d+1]*o)}return M}function S(e,n){if(e.loopStart===-1||n<e.loopEnd)return n;const s=e.loopEnd-e.loopStart,t=n-e.loopEnd;return e.loopStart+t-s*Math.floor(t/s)}class T extends AudioWorkletProcessor{constructor(){super();h(this,"wave");h(this,"pos");h(this,"table");h(this,"dPos");h(this,"lastUpdate");h(this,"tunePos");h(this,"tuneDPos");h(this,"tuneVol");this.port.onmessage=this.handleMessage.bind(this),this.wave={samples:new Float32Array(0),sampleRate,loopStart:-1,loopEnd:-1,rootNote:60,rootFine:0},this.pos=-1,this.table=m,this.dPos=1,this.lastUpdate=currentTime,this.tunePos=0,this.tuneDPos=0,this.tuneVol=0}handleMessage(s){const t=s.data;switch(t.type){case"start":this.handleStartMessage(t);break;case"stop":this.handleStopMessage();break;case"tune":this.handleTuneMessage(t);break}}handleStartMessage({wave:s}){const t=s.sampleRate/sampleRate;this.dPos===t||(sampleRate<s.sampleRate?this.table=c(sampleRate/s.sampleRate):this.table=m),this.wave=s,this.dPos=t,this.pos=0,this.port.postMessage(this.pos),this.lastUpdate=currentTime}handleStopMessage(){this.pos=-1,this.port.postMessage(this.pos)}handleTuneMessage({freq:s,vol:t}){this.tuneDPos=Math.max(0,Math.min(1,s/sampleRate)),this.tuneVol=Math.max(0,Math.min(1,t))}process(s,t){const r=t[0],a=r[0];let{pos:o,tunePos:l,tuneDPos:M,tuneVol:p,table:P,wave:d,dPos:k}=this;if(o===-1)return!0;for(let f=0;f<a.length;f++){if(o>=d.samples.length){o=-1;break}a[f]=R(P,d.samples,o)*.8*(1-p)+Math.sin(l*2*Math.PI)*p,o=S(d,o+k),l=l+M,l=l-Math.floor(l)}this.pos=o,this.tunePos=l;for(let f=1;f<r.length;f++){const D=r[f];for(let g=0;g<a.length;g++)D[g]=a[g]}return(currentTime-this.lastUpdate>1/60||o===-1)&&(this.port.postMessage(o),this.lastUpdate=currentTime),!0}}registerProcessor("wave-player",T)})();
